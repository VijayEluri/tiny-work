= ノート =

== 大小関係 ==
プログラムを書くとき、場合分けの列挙ができなくて時間を潰すことが多い。
場合分けを代数的に列挙することを考える。
手始めに、大小関係の場合分けを考えてみる。
整数の大小関係を考える。大小関係の推移性と反射性は拘束条件のように働く。
三つの変数の真ん中の値を求める関数は次のようになる。
{{{
midian:(a:Z, b:Z, c:Z) -> Z = {
	code = {
		if a <= b {
			if b <= c {
				return b;
			} else c <= a {
				return a;
			}
			return c;
		}
		if a <= c {
			return a;
		} else c <= b {
			return b;
		}
		return c;
	}
}
}}}
このコードの正しいことの証明は次の表に拠る。
||条件 ||ソートされた単語 ||
||a<=b & b<=c ||abc ||
||a<=b & (1-b<=c) & c<=a ||cab ||
||a<=b & (1-b<=c) & (1-c<=a) ||acb ||
||(1-a<=b) & a<=c ||bac ||
||(1-a<=b) & (1-a<=c) & c<=b ||cba ||
||(1-a<=b) & (1-a<=c) & (1-c<=b) ||bca ||
条件式と単語を対応させて、計算を簡単にすることを考えてみる。

単語から条件式への写像を{{{f:FZ -> B}}}を次のように定義する。

シャッフル積{{{s:(Z,Z)->Z}}}を考える。
シャッフル積は順序付けされた点の並びを列挙する。
例えば、ソート済みに２つの単語、abとc、が与えら時、(a,b,c)を文字とする
ソート済みの単語の列挙は、次のシャッフル積で与えられる。
{{{[ab].s[c]=[abc]+[acb]+[cab]}}}
また、ライプニッツ則が成り立つ。
{{{[a].s(x.m y)=([a].s x).m y + x.m ([a].s y)}}}
	* シャッフル積のライプニッツ則が冪等半環を係数とする場合だけかは不明

== バックアップ ==
整数の大小関係を考える。大小関係の推移性は拘束条件のように働く。
例えば、 三つの整数の間の大小関係を独立に 定めることができない。
(a,b,c):Z^3^として、(a,b)と(b,c)の関係を与えた時に、(a,b)の取りうる関係を見てみる。
||  || b<=c || c<b || 
|| a<=b || a<=b<=c || all || 
|| b<a || all || c<a || 
ここで、allは何も定まらないことを表すものとする。
この表の場合は、allはa<=cまたはc<aを表す。
三値関係{<,=,>}の場合も見てみる。
||  || b=c || b<c || c<b ||
|| a=b || a=c || a<c || c<a ||
|| a<b || a<c || a<c || all || 
|| b<a || c<a || all || c<a ||
これらの表を行列としてみると、二値関係の場合も、三値関係の場合も、
	* 対称行列であり、
	* 行の和はallになり、
	* 列の和はallになり、
	* 対角成分の和はallになる、
ということが見て取れる。
行列の対称性は、論理積の対称性({{{x and y = y and x}}}) 
と大小関係の反射性({{{a<=b and b<=a iff a=b}}})からの帰結なのだろう。

