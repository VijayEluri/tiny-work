= プログラミング =
== 単語の抽出 ==
||形態素解析 ||辞書を参照 ||
|| ||辞書がすべて ||
|| ||辞書のメンテナンスが必要 ||
||N-gram ||機械的に分割 ||
|| ||東京都から"東京"と"京都"を抽出 ||

== Lucene ==
== データの構造 ==
文書に属性を付加して、レコードとすることができる。
例えば、
{{{
今日は曇り空なので、傘を忘れないようにしよう。
}}}
という文書に次のような属性を付加することができる。
||日付 ||タイトル ||内容 ||
||1010 ||備忘録 ||今日は曇り空なので、傘を忘れないようにしよう。 ||
日付、タイトル、内容というフィールドを持ったレコードとなる。
Luceneでは、各フィールドに対して検索できる。
例えば、
	* 一月一日から四月一日までの、
	* タイトルが備忘録または日記という
レコードを検索する場合は、次のようになる。
{{{
日付:[0101 TO 0401] AND タイトル:備忘録|日記
}}}
内容に空が含まれるレコードの検索は次のようになる。
{{{
内容:空
}}}

== 単語の抽出 ==
単語の抽出のための機能はクラス化されていて、以下のような実装がある。
	* Analyzer
		* Japanese Analyzer 日本語形態素解析
		* CJK Analyzer　日本語2-gram
		* Standard Analyzer 日本語1-gram
		* ...
Luceneの機能には次のものがある。
	* 単語の検索
	* 成句（複数単語の連結。フレーズともいう）の検索
	* 正規表現による検索
	* あいまい検索
	* 範囲指定の検索
	* 組み合わせ　AND, OR, NOT, ()
Luceneの標準検索式の要素は
{{{
フィールド名:検索式
}}}
という書式になる。次はLuceneの検索式の一例で、書籍を検索する条件を表現している。
{{{
PUB_DATE:[200701 TO 200706] AND CAT:コンピュータ|プログラミング|*
}}}
この検索式は、出版日（PUB_DATE）が2007年1月から6月で、
コンピュータまたはプログラミングのカテゴリ（CAT）に属する書籍を検索する
検索式である。

== ML ==
ターミナルの起動
{{{
	> ocaml
}}}
ターミナルの終了
{{{
	##quit;;
}}}
最初の#はOcaml-ターミナルのプロンプトで、'#quit;;'を打ち込む。

書式
||ML ||ラムダ ||
||let x = a in b ||(\lambda_x(b), a) ||

== CDuce ==
書式
||CDuce ||ラムダ ||
||let x = "hello " in let y = "world" in x @ y ||(\lambda_x(\lambda_y(x @ y), "world"), "hello ") ||
|| ||@は単語の連結 ||
||let (x, y) = ("hello ", "world") in x @ y ||(\lambda_x(\lambda_y(x @ y), "world"), "hello ") ||
|| ||直積のサポート ||
