[[diary|日誌]]
%toc 目次

= 日誌を始めた =
vimwikiのdiaryという機能を使って日誌をつけてみる。

= プログラミング言語 =
日誌をつけ始めて感じたことだが、vimwikiを使い始めたばかりなので、
設定を頻繁に修正する。
vimwiki用のsnippets、html用のcssやjavascript等を頻繁に修正している。
何か新しいことを始めた時にいつも起こることなので、これはしょうがないのだが、
html用のcssやjavascript等のデプロイが面倒なことは何とかしたい。
javaを用いればantタスクで一撃なのだが、javaは起動が重いので、
起動の軽い軽量言語でデプロイをしたいのだが、
なかなかこれだというものが見つからない。
bashまたはluaでできないかと思ったのだが、両者とも解決策が見つからなかった。
* cygwinのbash
	* ファイルの最終更新日時を得る方法がわからない。
	* 文法が難しい。
* lua
	* ファイルの最終更新日時を得る方法がわからない。
luaを拡張するのが一番汎用性が高いかなと思っているが、
自分でミニ言語を作っても手間は変わらないかもしれない。

$8+9$を計算するプログラムを考えてみる。
組み込み型uint64を数値として扱うためのnumericクラスをロードして、
numericクラスからメソッドplusを呼び出すとする。
スタックは逆ポーランドで処理する。
{{{cpp class='brush: c++;'
push_uint64 8
set_type -1 numeric
push_uint64 9
set_type -1 numeric
call_method plus 2
pop 1
}}}
無駄の多い処理だが、一つのスタックで処理しようとすると、しょうがないだろう。
スタックの数を増やせば、無駄は減らせるが、仮想機械の仕様は複雑になる。
* 型numericが定義されている。
* 型numericに関数plusが定義されている。
* 関数plusが入力二つに出力一つということが定義されている。
* 関数plusの二つ目の入力にnumericをとれるということが定義されている。
* データuint64に型numericをセットできることが定義されている。

= vimwiki =
vimwikiを使うにあたって幾つかのツールを使ってみることにする。
* [[http://www.mathjax.org/|MathJax]]
	これはすごい。リソースが多そうなのでHTMLからwebを参照するようにしている。
	したがって、internetに繋がっていない環境では数式は表示されない。
* [[http://alexgorbatchev.com/SyntaxHighlighter/|SyntaxHighlighter]]
	Wikiが$\TeX$に比べて良いところにプログラムコードの取り扱いが丁寧なことがある。
	というわけで、HTMLをカラフルにするjavascriptを使ってみる。
* [[http://nanasi.jp/|名無しのvim使い]]
	ツールではないがvimwikiのHowToを紹介してくれている。
vimwikiのカスタムは次のスクリプトを参考にするとよい。
{{{
~/vimfiles/plugin/vimwiki.vim
~/vimfiles/ftplugin/vimwiki.vim
}}}

= 形式言語 =
論文
<a name='hopkins'>
[[http://www.cs.cornell.edu/~kozen/|Mark Hopkins and Dexter Kozen. Parikh's theorem in commutative Kleene algebra]]
</a>について。

この論文では、
<div class='prop' id='prop-1'>
可換Kleene代数$K$では、任意の多項式$(f|x)\in K[x]$に対して、
$x_f:=(f'\circ f|0)^*(f|0)$は次の性質を満たす
* $x_f\ge (f|x_f)$
* $x\ge (f|x)\implies x\ge x_f$
</div>
ことを証明している。
$a:=(f|0)$、$(v|x):=(f'|x)$とすると、次の式から、
{{$
\begin{alignat}{3}
x_f &= (f'\circ f|0)^*(f|0) &&= (f|0) + (f'\circ f|0) x_f &&= a + (v|a)x_f \\
& (f|x) &&= (f|0) + (f'|x)x &&= a + (v|x)x
\end{alignat}
}}$
次のことが成り立つ。
* $x=a+(v|a)x$が一意に解を持つならば、それは$x_f$となり、
* $a+(v|x)x\le x\implies x_f\le x$となる
ここで、$x=a+(v|a)x$は、解が存在すことも、解が一意に定まることも保証されていない。
例えば、$a=0$の場合は、$(v|a)^\infty\in K$とならない限り、解は存在しない。
仮に、$(v|a)^\infty\in K$だったとしても、$a=0$かつ$(v|a)=1$の場合は、
任意の$x\in K$が$x=a+(v|a)x$の解となる。
<a href='#faa'>Faà di Bruno代数との類似</a>

<a href='#hopkins'>論文</a>から、
もう少し突っ込んで$x_f$を調べてみる。
次の式から、$n\le2\in\bfN$で$x_f^n=a^n(f'|a)$となる。
{{$
	a^*b^* = \sum_{m,n\in\bfN} a^mb^n 
	= \sum_{n\in\bfN}\sum_{k=0}^n a^kb^{n-k}
	\overset{!}{=} \sum_{n\in\bfN} (a + b)^n = (a + b)^*
	\quad\text{! idempotency and commutativity}
}}$
したがって、
{{$
(f|x_f) = \sum_{n\in\bfN} f_nx_f^n 
= f_0 + \left(\sum_{n\in\bfN} f_{n+1} f_{n+1}(f|0)^n\right) x_f
= (f|0) + (f'\circ f|0) x_f
}}$
となって、$x_f$が$f$の不動点$x_f=(f|x_f)$になっていることがわかる。
したがって、最初に挙げた定理から、$x_f$が不動点$x_f=(f|x_f)$の最小値になっていることがわかる。
<a href='#hopkins'>論文</a>では、
$(f|x_f)\le x_f$という不等式の形で留まっているが、ここでは、
$(f|x)=\sum_{n\in\bfN}f_nx^n$と級数展開できるという、
より強い仮定の元で計算している。
この場合、任意の多項式$(f|x)\in K[x]$に対して、
$x_f:=(f'\circ f|0)^*(f|0)$は次の性質を満たすことになる。
* $x_f=(f|x_f)$
* $x\ge(f|x)\implies x\ge x_f$
したがって、$x=(f|x)=(f|0)+(f'\circ f|x)x$の解が一撃で$(f'\circ f|0)^*(f|0)$と求まるという、
大変有難いことが成り立つ。

最後に<a href='#hopkins'>論文</a>の題名になっているParikhの定理について述べておく。
$A:=\set{a_1,\dots,a_N}$を大きさ$N$の有限集合として、
モノイド準同型$\phi:A^*\to\bfN^N$を次のように定義する。
{{$
\phi w := \begin{pmatrix}
	\text{the number of occurence of $a_1$ in $w$} \\
	\text{the number of occurence of $a_2$ in $w$} \\
	\vdots \\
	\text{the number of occurence of $a_N$ in $w$} \\
\end{pmatrix}\in\bfN^N \quad\text{for all } w\in A^*
}}$
そして、$L,M\subseteq A^*$として、
集合同型$\phi L_1\simeq\phi L_2\subseteq\bfN^N$が成り立つとき、
$L$と$M$は文字同値（letter equivalence）という。Parikhの定理は、
* すべての文脈自由言語は正規言語に文字同値となる
と主張する。
$K$を$\hat{K}$を対称化したものだとして、
{{$
\hat{K} := \bfB\blr{A},\quad K:= \frac{\bfB\blr{A}}{\blr{a_ia_j=a_ja_i\text{ for all }i,j\in1..N}}
}}$
$A$を全順序集合にすると、代数準同型$\pi:\hat{A}\to A$を定義できる。
$\hat{K}$の文脈自由文法を$\hat{x}=(\hat{f}|\hat{x})$とすると、
これを$\pi$によって$K$に持って行くと、$\pi\hat{x}=(\pi\hat{f}|\pi\hat{x})$
となる。
この等式の解は、$f:=\pi\hat{f}$とすると、<a href='#prop-1'>命題</a>から、
$x_f=(f'\circ f|0)^*(f|0)$となる。この解は思いっきり正規言語なので、
文脈自由言語から正規言語への代数準同型が得られたことになる。
そして、$\pi$は文字の並びを対称化しているだけだから、多分、
$A^*$から可換モノイド$M$への任意のモノイド準同型$\psi:A^*\to M$に対して、
モノイド同型$\psi\hat{K}\simeq\psi\pi\hat{K}$が成り立つ。
（修正：<a href='#sym'>成り立つ。</a>）
したがって、<a href='#hopins'>論文</a>で主張しているように、
彼らの結果は、Parikhの定理を任意の可換モノイドへの任意のモノイド準同型に拡張したものになっている。

<a name='#sym'/>
== 対称化の普遍性 ==
$X$を集合、$\clW X$を$X$から生成される自由モノイド、
$\clS X$を$X$から生成される可換自由モノイドとする。
$\clU$をモノイドから集合への忘却関手とすると、
任意の<u>可換</u>モノイド$A$に対して、
集合同型$\cat{Mon}(\clW X,A)\simeq\cat{Set}(X,\clU A)\simeq\cat{Mon}(\clS X,A)$が成り立つ。

<a name='#faa'/>
== Faà di Bruno代数との類似 ==
複素数上の形式級数環$\bfC[[x]]$を写像の合成によって$\bfC[[x]]\subseteq\op{end}\bfC[[x]]$とみた時、
$V\subset\bfC[[x]]$を$x+\sum_{n\in\bfN} f_{n+2}x^{n+2}$の形の形式級数全体の作る集合とすると、
* $V$は部分モノイドとなり、
* 余単位射$\epsilon:(f|x)\mapsto(f|0)$により、
	コピー演算$\op{dup}:f\mapsto f\times f$は余積となり、
* 写像の合成とコピーは双モノイドになる。
今の場合の、線形等式$x=a+(v|a)x$の解の一意性が壊れる場合の多項式$(f|x)=a+(v|x)$の形は、
$V$が双モノイドとなる場合の形式級数の形と全く同じになっている。

== 問題 ==
* Kleeneスターが級数展開できることはどのような仮定しているのかを明らかにせよ。
	連続性に関係していると思っている。<a href='##hopkins'>論文</a>では、
	$K$が完備かどうかに関わらずに成り立つところを議論している。
	$K$が完備であれば、$x=(f'\circ f|0)^*(f|0)\implies x=(f|x)$が言えるのではないかと思っている。
* 文法$x=a+bax$と$x=a+xbx$は自然数上で考えると異なる多項式を解に持つが、
	ブーリアン上で考えると同じ多項式$x=(ba)^*a$を解に持つ。
	$a^*b^*=(a+b)^*$の計算がカギになるかも。
	Litvinovなどがやっているべき等代数
	[[http://arxiv.org/abs/1005.1247|Tropical Mathematics, Idempotent Analysis, Classical Mechanics and Geometry]]
	とも関係するのだろうが、有理数または整数からブーリアンへ移行する方法が思いつかない。
* <a href='##faa'>Faà di Bruno代数との類似</a>を考えてみたい。
	等式$x=a+x$では、$a\neq0$の時は$x=a$が解になるが、$a=0$の時は任意の$x\in K$が解になる。
	$a=0$で対称性が一気に高くなるとみることができる。

= 関数型言語 =
== ラムダ式と不動点 ==
ラムダ式を写像として解釈することを考えて、Y-コンビネータ$Y$
{{$
Y := \lambda{x}.\plr{X_x X_x},\quad X_x := \lambda{y}.\gplr{x\plr{y y}}
\implies
Yf = X_fX_f = \lambda{y}.\gplr{f\plr{y y}}X_f = f\plr{X_f X_f} = f\plr{Y f}
}}$
を写像として表そうとすると、$(Yf)x=f(Yf)x$より、$(Yf)x$は$f$の不動点となる。
したがって、写像$f$の不動点の集合を$\op{Fix}f$とすると、
$Yf:\op{dom}f\to\op{Fix}f$となる。しかし、
$\op{next}:\bfN\to\bfN$で$\op{next}n=n+1$などは不動点を持たないので、
{{$
(Y\op{next})x = 1 + (Y\op{next})x \implies 0 = 1
}}$
$Y$の領域を不動点を持つ写像に限定する必要がある。
したがって、ラムダ式を写像として表すためには、
それが作用する適切な空間を見つける必要がある。
そこで領域理論の出番となる。
