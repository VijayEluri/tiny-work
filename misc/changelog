2009-12-06  hiroyuki

	* 覚書: システムを壊した
	SDでzaurusのシステムを作っている最中に、間違えて本体のubuntuのシステムファイルを書き換えてしまった。ubuntuをインストールし直す。

2009-12-05  hiroyuki

	* 覚書: autoシリーズ
	1. 作成: ワーキングディレクトリ
	hello/
	2. 作成: ソースディレクトリ
	hello/src
	3. 作成: ソースコード
	hello/src/hello.c
	4. 作成: Makefile.am
	--
	-- hello/Makefile.am -- {
		SUBDIRS = src
	-- hello/Makefile.am -- }
	--
	-- hello/src/Makefile.am -- {
		bin_PROGRAMS = hello
		hello_SOURCES = hello.c
	-- hello/Makefile.am -- }
	--
	5. 実行: autoscan; mv configure.scan configure.ac
	6. 編集: configure.ac
	AM_INIT_AUTOMAKE([foreign])を付け加える
	--
	-- hello/configure.ac -- {
	AC_PREREQ([2.64])
	AC_INIT(hello, 0.0.1, [BUG-REPORT-ADDRESS])
	AM_INIT_AUTOMAKE([foreign])
	AC_CONFIG_SRCDIR([src/hello.c])
	AC_CONFIG_HEADERS([config.h])
	AC_PROG_CC
	AC_CHECK_HEADERS([stdlib.h])
	AC_CONFIG_FILES([Makefile src/Makefile])
	AC_OUTPUT
	-- hello/configure.ac -- }
	--
	7. 実行: autoheader
	8. 実行: aclocal
	9. 実行: automake --add-missing --copy
	10. 実行: autoconf
	11. 実行: configure
	12. 実行: make
	13. やれやれ

	2009-12-04  hiroyuki

	* 覚書: autoシリーズ
	antoconf: configureを生成するツール
	automake: Makefile.amからMakefile.inを生成するするツール
	* 覚書: autoシリーズでの作業の流れ
	aclocal: configure.ac -> aclocal.m4
	autoheader: (configure.ac, aclocal.m4) -> config.h.in
	automake (configure.ac, Makefile.am) -> Makefile.in
	autoconf: (configure.ac, aclocal.m4) -> configure
	configure: (Makefile.in, config.h.in) -> (Makefile, config.h)
	make: (Makefile, config.h, ソース) -> ターゲット

2009-12-03  hiroyuki

	* 覚書: xmodmapのパッチ
	/home/hiroyuki/work/zaurus.oe/openembedded/recipes/xserver-common/files
	ここに各機械ごとのパッチがある。
	* 覚書: ウィンドウマネージャー
	dwmをもとにする。
	ホットキーの割り当てやウィンドウのレイアウトなどをカスタマイズできるようにする。
	どういう方法でやる？
	1. ウィンドウマネージャーの雛形を作る。
		dwmをコピーすればよい。
	2. メニューバーや入力のディスパッチなどのカスタマイズが必要な部分を共有ライブラリから読み込むようにする。
		dwmを修正すればよい。

2009-12-02  hiroyuki

	* 覚書: vimでの範囲選択
	ビジュアルモードでvを押すと範囲選択が開始される。
	lとhで範囲を拡大縮小する。
	コピーや削除の操作をすると、選択範囲をコピーや削除する。
	範囲選択の操作も同時に終了する。
	* 問題: dashのインストール
	bitbakeでのタイプミスと思われる次の修正をしてコンパイルした。
	http://ftp.debian.org/debian/pool/main/d/dash/dash_0.5.5.1-2.3.diff.gz
	http://ftp.de.debian.org/debian/pool/main/d/dash/dash_0.5.5.1-3.diff.gz
	しかし、インストールしてみた結果、動作がおかしい。
	-> bashをインストール
	補完機能が強化された。
	* 覚書: bitbake
	akita用のマクロ
	 /home/hiroyuki/work/zaurus.oe/openembedded/conf/machine/akita.conf
	* 問題: gvimのエラー
	Ubuntuを9.1にしてから次のエラーがでるようになった。
	** (gvim:31527): CRITICAL **: gtk_form_set_static_gravity: assertion `static_gravity_supported' failed
	vimのバージョンは次のようになっている。
	VIM - Vi IMproved 7.2 (2008 Aug 9, compiled Sep 21 2009 11:19:54)
	適用済パッチ: 1-245
	Compiled by buildd@rothera.buildd
	Huge 版 with GTK2-GNOME GUI.  機能の一覧 有効(+)/無効(-)
	-> フィックスを待つ。
	* 問題: タッチパッド
	タッチパッドを無効にしているのだが、入力メソッドの切り替えキー、英数/かな
	を押した途端に、タッチパッドが有効になってしまう。
	-> uimの問題？
	入力メソッドをscim-immoduleにしても解決しない。
		-> uimの問題ではない。
		-> XやHalの問題？
			-> /etc/*からhagul='かな'の文字を探してもないので、XやHalの問題で
			はない。
		-> synclientとsyndaemonの設定
		シェルから次のコマンドを入力する。
		synclient TouchpadOff=1
		syndaemon -d -i 60m
		すると、タッチパッドが無効になった。 syndaemonコマンドの意味は、
		-dがデーモンとして動作し、
		-i 60mがキーを押し終わってから60分後にマウスパッドを有効にする
		ということらしい。
	多分、タッチパッドを取り扱っているところに、Macbookに対応していないところ
	があるのだろう。
		synclient TouchpadOff=1
	だけでタッチパッドの機能を無効にできないというのは変である。
	* 覚書: 入力メソッドの変更
	シェルから次のコマンドを入力する。
	im-switch -z ja_JP -c
	* 覚書: uimをオンオフするキーの設定
	次のファイルを編集する。
	${HOME}/.uim.d/customs/custom-global-keys1.scm
	* 覚書: タッチパッド関連のシェル関数
	synclient: タッチパッドの設定
	syndaemon: タッチパッドのオンオフを制御
