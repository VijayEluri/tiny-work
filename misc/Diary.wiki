%toc Table of Contents

= 2013-02-05 =

= 2013-02-04 =

== vimwiki ==
=== vimwikiの使い方 ===
vimwikiは書きっぱなしの文章を作るのには適しているが、
編集を繰り返す文章には適していないように思う。

=== htmlのカラー化 ===
次のヘルプに従って
[[http://alexgorbatchev.com/SyntaxHighlighter/|SyntaxHighlighter]]
を使うようにした。。
{{{
:h vimwiki-option-nested_syntaxes
}}} 
* ハイライトなし
	{{{haskell
	data Color = Red | Green | Blue
	}}}
* ハイライトあり
	{{{haskell class='brush: haskell;'
	data Color = Red | Green | Blue
	}}}

=== vimwikiの良いところ ===
vimwikiを使っていて良いと思った点として、ファイル毎にコンパイルができることがある。
$\TeX$との比較になるが、$\TeX$では全コンパイルしかできないので、
量が増えてくるとコンパイルが遅くなる。
$\TeX$が全コンパイルを必要とする理由はリンクを解決するためだろう、多分。

htmlのリンクを解決するのはブラウザーの役目と決まっているので、
wikiからhtmlへの変換するだけなら、リンクを解決する必要はない。
wiki文書中の特定のパターン、"$[[\cdots]]$"と"$\op{http}://\cdots$"、を見つけて、
それを"$\blr{\op{a}}\cdots\blr{\op{a}}$"に書き換えてhtml文書に吐き出だせばよい。
しかし、vimwikiでは、vimエディター内でリンクへジャンプできるように、
次の方法でリンクを解決している。
*	リンクへの参照がuriで指定されている場合:<br/>
	この場合は、システムの機能を利用して、ブラウザに指定のuriを開かせる。
	例えば、次のようなwiki文書中の文字列をvimエディター内でenterすると、
	ブラウザでそこが表示される。
	{{{
	file://c:/Users/.../a.html#a
	}}}
* リンクへの参照が大文字始まりの単語で指定されている場合:<br/>
	Abc という文字列をvimエディター内でenterすると、Abc.wikiというファイルがvimエディターで開かれる。
wiki文書内にアンカーを埋め込んで、そこにvimエディターからジャンプしようとすると、
リンク先のwiki文書内で目的のアンカーの位置を特定するための仕組みが必要になる。
現在のところ、vimwikiにはwiki文書内にアンカーを埋め込む機能はないが、
開発リポジトリで行われている議論を見ると、必要性を感じているようだ。
[[http://code.google.com/p/vimwiki/issues/detail?id=191|Vimwiki]]
文書内へのリンクが欲しくなった時のために次のことをやっておいた。
* vimwikiでアンカータグを直接書けるようにする:<br/>
	_vimrcに次の文を追加する。
	{{{
	let g:vimwiki_valid_html_tags = 'b,i,s,u,sub,sup,kbd,br,hr,a' 
	}}}
	次のように使う。
	{{{
	<a name='here'>ここ</a>に<a href='#here'>ジャンプ</a>
	}}}

=== vimwikiの使い方 ===
vimwikiのdiaryという機能を試そうと考えたが、日付毎にファイルを作るようなので
手作業で日誌を書くことにした。
そこで、ルーチン作業を減らすための設定をした。
	* [[http://stackoverflow.com/questions/12033273/|StackOverflow]]
	vimwikiでタブのキーイベントとキャプチャされるのを阻止する。
	_vimrcに次の文を加える。
	{{{
	let g:vimwiki_table_mappings = 0
	}}}
	* [[http://vim.wikia.com/wiki/Insert_current_date_or_time|VimTips]]
	snipMateに日付を入れるsnippetsを加える。
	{{{
	snippet today
		`strftime ("%Y-%m-%d")`
	}}}
	
= 2013-02-03 =

== vimwiki ==
プログラミング言語の勉強ノートにはTeXよりもWikiの方が書きやすい。
プログラムのコードではインデントが重要な役割を果たすが、TeXはインデントの
制御が難しい。逆に、プレインテキストでは数式の表現が難しい。
幸いにも、Vimのプラグインの
[[http://code.google.com/p/vimwiki/|Vimwiki]]
とJavascript
[[http://www.mathjax.org/ | MathJax]]
を使うと、数式込のHTMLが作れる。

Vimwikiのインストールと使い方については
[[http://nanasi.jp/vim/vimwiki.html | 名無しのvim使い]]
が参考になる。もちろん本家
[[http://code.google.com/p/vimwiki/|Vvimwiki]]
も。

Vimwikiを通してMathJaxを使う方法は、
[[http://code.google.com/p/vimwiki/wiki/MathematicsWithMathJax|Vimwiki]]
に書いてある。設定が必要になる。

=== _vimrcの設定 ===
{{{
help: vimwiki-option-template_path
}}}
を参考に次の一行を_vimrcに追加する。
{{{
let g:vimwiki_list = [{'path':'~/work/tiny-work/misc', 'path_html':'~/work/tiny-work/misc/output', 'template_path': '~/work/tiny-work/misc/vimwiki/', 'template_default': 'vimwiki', 'template_ext': '.html'}]
}}}

=== htmlファイルの作成 ===
MathJaxを読みこむようにHTMLの雛形vimwiki.htmlを作る。
{{{html class="brush: xml;"
<html>
	<head>
		<link rel="Stylesheet" type="text/css" href="%root_path%style.css" />
		<title>%title%</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
	</head>
	<body>
		<div class="content">
			%content%
		</div>
	</body>
</html>
}}}

=== MathJaxの記法 ===
*	インライン $a+b$
* ブロック 
{{$
	a+b
}}$
* 整列
{{$%split%
	f: X &\to Y \\
	x &\mapsto fx
}}$

=== MathJaxの使えない機能 ===
* xypic xypicやxymatrixの環境はまだ使えないらしい。
